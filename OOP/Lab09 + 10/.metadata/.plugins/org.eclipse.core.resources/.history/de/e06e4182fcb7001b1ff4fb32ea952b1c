package hust.soict.hedspi.aims;

import hust.soict.hedspi.aims.order.Order;
import hust.soict.hedspi.aims.media.Media;
import hust.soict.hedspi.aims.media.Track;
import java.util.ArrayList;
import java.util.List;
import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.Label;
import javafx.scene.control.Menu;
import javafx.scene.control.MenuBar;
import javafx.scene.control.MenuItem;
import javafx.scene.control.TextField;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import javax.naming.LimitExceededException;

public class AimsGUI extends Application {
    private List<Order> orders = new ArrayList<>();
    
    @Override
    public void start(Stage primaryStage) throws Exception {
        BorderPane root = new BorderPane();
        Scene primaryScene = new Scene(root, 900, 600);

        // TOP
        MenuBar menuBar = new MenuBar();
        Menu fileMenu = new Menu("File");
        Menu helpMenu = new Menu("Help");
        MenuItem exitItem = new MenuItem("Exit");
        MenuItem aboutItem = new MenuItem("About");
        fileMenu.getItems().add(exitItem);
        helpMenu.getItems().add(aboutItem);
        menuBar.getMenus().addAll(fileMenu, helpMenu);
        
        root.setTop(menuBar);

        // LEFT
        VBox left = new VBox(10);
        left.setAlignment(Pos.TOP_CENTER);
        left.setPrefSize(180, 600);
        left.setStyle("-fx-background-color: #ABABAB");
        
        Label lbOrder = new Label("Order");
        lbOrder.setStyle("-fx-font-weight: bold; -fx-text-fill : blue;");
        left.getChildren().add(lbOrder);
        left.getChildren().add(new Label(""));
        left.getChildren().add(new Label("- - - - - - - - - -"));
        left.getChildren().add(new Label(""));

        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.setHgap(25);
        grid.setVgap(15);
        grid.setPrefSize(180, 600);
        left.getChildren().add(grid);
        Button btnAddOrder = new Button("+");
        TextField tfOrderName = new TextField();
        tfOrderName.setMaxWidth(100);
        tfOrderName.setPromptText("New Order");
        grid.add(tfOrderName, 0, 0);
        grid.add(btnAddOrder, 1, 0);

        root.setLeft(left);

        // CENTER
        VBox center = new VBox(10);
        center.setAlignment(Pos.TOP_CENTER);

        Label lbOrderName = new Label("Order: ");
        lbOrderName.setStyle("-fx-font-weight: bold; -fx-text-fill : green;");
        center.getChildren().add(lbOrderName);
        center.getChildren().add(new Label(""));

        GridPane gridCenter = new GridPane();
        gridCenter.setPadding(new Insets(15, 15, 15, 15));
        gridCenter.setHgap(30);
        gridCenter.setVgap(15);
        center.getChildren().add(gridCenter);
        
        Button btnAddItem = new Button("New item (+)");
        gridCenter.add(btnAddItem, 0, 0);

        root.setCenter(center);

        // RIGHT
        VBox right = new VBox(10);
        right.setAlignment(Pos.TOP_CENTER);
        right.setPrefSize(200, 600);
        right.setStyle("-fx-background-color: #ABABAB");
        
        Label lbInfo = new Label("Info");
        lbInfo.setStyle("-fx-font-weight: bold; -fx-text-fill : blue;");
        right.getChildren().add(lbInfo);
        right.getChildren().add(new Label(""));
        right.getChildren().add(new Label(""));

        root.setRight(right);

        
        // Create item scene
        GridPane inputGrid = new GridPane();
        inputGrid.setPadding(new Insets(10, 10, 10, 10));
        inputGrid.setHgap(25);
        inputGrid.setVgap(15);
        inputGrid.setPrefSize(600, 500);
        Scene inputScene = new Scene(inputGrid, 600, 500);
        
        Button btnBack = new Button("Back");
        btnBack.setPrefWidth(150);
        inputGrid.add(btnBack, 0, 0);
        Button btnReset = new Button("Reset");
        btnReset.setPrefWidth(300);
        inputGrid.add(btnReset, 1, 0);
        Button btnCreate = new Button("Create");
        btnCreate.setPrefWidth(150);
        inputGrid.add(btnCreate, 2, 0);
        inputGrid.add(new Label("Select Media Type: "), 0, 1);
        ObservableList<String> media = FXCollections.observableArrayList("Book", "DVD", "CD");
        ChoiceBox<String> itemChoiceBox = new ChoiceBox<>(media);
        inputGrid.add(itemChoiceBox, 1, 1);
        
        TextField itemID = new TextField();
        TextField itemTitle = new TextField();
        TextField itemCategory = new TextField();
        TextField itemCost = new TextField();
        TextField bookAuthors = new TextField();
        TextField discDirector = new TextField();
        TextField cdArtists = new TextField();
        TextField dvdLength = new TextField();
        Order currentOrder = null;
        List<Media> itemsOrdered = null;

        // Event
        exitItem.setOnAction(evt -> {
            System.exit(0);
        });
        aboutItem.setOnAction(evt -> {

        });
        btnAddOrder.setOnAction((var evt) -> {
            try {
                if (!tfOrderName.getText().isEmpty()) {
                    Order newOrder = new Order();
                    orders.add(newOrder);
                    if (Order.nbOrders == Order.MAX_LIMITED_ORDERS)
                        btnAddOrder.setDisable(true);
                    
                    grid.getChildren().remove(btnAddOrder);
                    grid.getChildren().remove(tfOrderName);
                    
                    Button btnOrderName = new Button(tfOrderName.getText());
                    btnOrderName.setPrefWidth(100);
                    grid.add(btnOrderName, 0, Order.nbOrders-1);
                    
                    Button btnRemoveOrder = new Button("-");
                    btnRemoveOrder.setPrefWidth(25);
                    grid.add(btnRemoveOrder, 1, Order.nbOrders-1);
                    
                    tfOrderName.setText("");
                    grid.add(tfOrderName, 0, Order.nbOrders);
                    grid.add(btnAddOrder, 1, Order.nbOrders);
                    
                    btnRemoveOrder.setOnAction(evt2 -> {
                        int rowIndex = GridPane.getRowIndex((Node) evt2.getTarget());
                        orders.remove(rowIndex);
                        Order.nbOrders -= 1;
                        btnAddOrder.setDisable(false);
                        grid.getChildren().removeIf(node -> GridPane.getRowIndex(node) == rowIndex);
                        
                        // shift rows up
                        int i = rowIndex;
                        for (Node child : grid.getChildren()) {
                            int nodeRowIndex = GridPane.getRowIndex(child);
                            if(nodeRowIndex == (i + 2))
                                i += 1;
                            if(nodeRowIndex > i)
                                GridPane.setRowIndex(child, i);
                        }
                    });
                    btnOrderName.setOnAction((var evt3) -> {
                        int rowIndex = GridPane.getRowIndex((Node) evt3.getTarget());
                        Button btnOrderNameShow = (Button) grid.getChildren().get(2 * rowIndex);
                        lbOrderName.setText("Order: " + btnOrderNameShow.getText());
//                        currentOrder = orders.get(rowIndex);
//                        itemsOrdered = currentOrder.getItemsOrdered();
                    });
                }
            } catch (LimitExceededException e) {}
        });
        btnAddItem.setOnAction(evt -> {
            btnReset.fire();
//            Button btnItem = new Button("ABC");
//            btnItem.setPrefWidth(330);
//            gridCenter.add(btnItem, 0, 1);
//            Button btnRemoveItem = new Button("-");
//            btnRemoveItem.setPrefWidth(25);
//            gridCenter.add(btnRemoveItem, 1, 1);
            primaryStage.setScene(inputScene);
        });
        btnBack.setOnAction(evt -> {
            primaryStage.setScene(primaryScene);
        });
        btnCreate.setOnAction(evt -> {

            // 
            primaryStage.setScene(primaryScene);
        });
        itemChoiceBox.setOnAction(evt -> {
            switch (itemChoiceBox.getValue()) {
                case "Book" -> {
                    inputGrid.getChildren().removeIf(node -> GridPane.getRowIndex(node) >= 2);
                    inputGrid.add(new Label("Book ID: "), 0, 2);
                    inputGrid.add(itemID, 1, 2);
                    inputGrid.add(new Label("Book Title: "), 0, 3);
                    inputGrid.add(itemTitle, 1, 3);
                    inputGrid.add(new Label("Book Category: "), 0, 4);
                    inputGrid.add(itemCategory, 1, 4);
                    inputGrid.add(new Label("Book Cost: "), 0, 5);
                    inputGrid.add(itemCost, 1, 5);
                    inputGrid.add(new Label("Book Authors: "), 0, 6);
                    inputGrid.add(bookAuthors, 1, 6);
                }
                case "CD" -> {
                    inputGrid.getChildren().removeIf(node -> GridPane.getRowIndex(node) >= 2);
                    inputGrid.add(new Label("CD ID: "), 0, 2);
                    inputGrid.add(itemID, 1, 2);
                    inputGrid.add(new Label("CD Title: "), 0, 3);
                    inputGrid.add(itemTitle, 1, 3);
                    inputGrid.add(new Label("CD Category: "), 0, 4);
                    inputGrid.add(itemCategory, 1, 4);
                    inputGrid.add(new Label("CD Cost: "), 0, 5);
                    inputGrid.add(itemCost, 1, 5);
                    inputGrid.add(new Label("CD Director: "), 0, 6);
                    inputGrid.add(discDirector, 1, 6);
                    inputGrid.add(new Label("CD Artists: "), 0, 7);
                    inputGrid.add(cdArtists, 1, 7);
                    Button btnAddTrack = new Button("Add Track");
                    inputGrid.add(btnAddTrack, 0, 8);
                    btnAddTrack.setOnAction(addTrackEvent -> {
                        
                    });
                }
                case "DVD" -> {
                    inputGrid.getChildren().removeIf(node -> GridPane.getRowIndex(node) >= 2);
                    inputGrid.add(new Label("DVD ID: "), 0, 2);
                    inputGrid.add(itemID, 1, 2);
                    inputGrid.add(new Label("DVD Title: "), 0, 3);
                    inputGrid.add(itemTitle, 1, 3);
                    inputGrid.add(new Label("DVD Category: "), 0, 4);
                    inputGrid.add(itemCategory, 1, 4);
                    inputGrid.add(new Label("DVD Cost: "), 0, 5);
                    inputGrid.add(itemCost, 1, 5);
                    inputGrid.add(new Label("DVD Length: "), 0, 6);
                    inputGrid.add(dvdLength, 1, 6);
                    inputGrid.add(new Label("DVD Director: "), 0, 7);
                    inputGrid.add(discDirector, 1, 7);
                }
            }
        });
        btnReset.setOnAction(evt -> {
            inputGrid.getChildren().removeIf(node -> GridPane.getRowIndex(node) >= 2);
            itemChoiceBox.setValue("");
        });
        
        primaryStage.setTitle("Aims Project");
        primaryStage.setScene(primaryScene);
        primaryStage.setResizable(false);
        primaryStage.show();
  }

    public static void main(String[] args) {
        launch(args);
    }
}